// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #B28451;

$color-secondary: #101d2c;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483A;
$color-grey-dark-2: #6D5D4B;

// FONT VARIABLES
$font-primary: 'Nunito', sans-serif;
$font-display: 'Josefin Sans', sans-serif;

html {
  box-sizing: border-box;
  font-size: 62.5%; // 1rem = 10px;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  font-family: $font-primary;
  color: $color-grey-dark-2;
  font-weight: 300;
  line-height: 1.6;
}

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content); // define the grid row tracks
  
  // normally, we need to have a pre-defined columns (4, 8, 12... columns layout just like bootstrap)
  // grid-template-columns: repeat(8, 1fr); // step 1, pre-defined columns
  // grid-template-columns: repeat(8, 14rem); // step 2, 1140 / 8 to get the approximate width for each column
  // grid-template-columns: repeat(8, minmax(min-content, 14rem)); // step 3, make it responsive by using the minmax function, the max is 14rem, and it will be at least wrap the content with line breaks
  // grid-template-columns: 8rem repeat(8, minmax(min-content, 14rem)); // step 4, add the extra ones
  // grid-template-columns: 8rem 1fr repeat(8, minmax(min-content, 14rem)) 1fr; // step 5, add the flexable columns before and after the 8 column layout, for that we can have center the 8 columns layout and also have some elements that can take 100% - sidebar width of the screen.
  // sidebar(8rem) | flexable grid | 8 column layout | flexable grid

  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr)[full-end]; // add track names and small fixes

}